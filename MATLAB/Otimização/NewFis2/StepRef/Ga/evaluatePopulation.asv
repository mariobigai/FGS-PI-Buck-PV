
function fitness= evaluatePopulation(parameters,population)

   
    fitness = zeros(size(population,1),1);

   for j=1:size(population,1)
           warning('off','all')


       %Penalizações com base nas restrições --------------------------------------------------------
    
        if (any(population(j,1:2) > parameters.Restr(2)) || any(population(j,1:2) < parameters.Restr(1))) ;fitness(j,1) = 500; end
        if (any(population(j,3:4) > parameters.Restr(4)) || any(population(j,3:4) < parameters.Restr(3))) ;fitness(j,1) = 500; end
        if (any(population(j,5:28) > parameters.Restr(6)) || any(population(j,5:28) < parameters.Restr(5))) ;fitness(j,1) = 500; end
        if (any(population(j,29:78) > parameters.Restr(8)) || any(population(j,29:78) < parameters.Restr(7))) ;fitness(j,1) = 500; end
        if (any(population(j,79:end) > parameters.Restr(10)) || any(population(j,79:end) < parameters.Restr(9))) ;fitness(j,1) = 500; end

        try
            fis = newFis2(population(j,:));
            n_pontos = 20
            erro = linspace(-1,1,n_pontos+1);
            var_erro = linspace(-1,1,n_pontos+1);
            kp = zeros(n_pontos+1,n_pontos+1);
            ki = zeros(n_pontos+1,n_pontos+1);
            for a =1:n_pontos % Loop para mapear todos pontos
                for b =1:n_pontos+1 
                    OUT = evalfis(fis, [erro(a), var_erro(b)]);
                    kp(a,b) = OUT(1);
                    ki(a,b) = OUT(2);
                end
            end
            kE = population(j,1);
            kdE = population(j,2);
            kkp = population(j,3);       
            kki = population(j,4);

            try
%Estabelece os inputs da simulação
                simIn = Simulink.SimulationInput('buck_pv_otm_step_vref');

                % simIn = simIn.setVariable('eta', 0.97384); % Fator de qualidade (Otimização)
                % simIn = simIn.setVariable('Isc', 9.29); % Corrente CC               
                % simIn = simIn.setVariable('alpha', 0.0005)  % coef de Isc 
                % simIn = simIn.setVariable('k', 1.38E-23); %8.62E-5; % Boltzmann
                % simIn = simIn.setVariable('q', q=1.6E-19); % Carga elementar
                % simIn = simIn.setVariable('EG', 1.12); % Energia de banda proibida
                % Rp=1329.6875;
                % Rs=0.38666;
                % simIn = simIn.setVariable('Tr', 298); % Temperatura de referência
                % simIn = simIn.setVariable('Voc', 46.1); % Tensão CC
                % simIn = simIn.setVariable('n_cell', 72); % Número de Células PV em Série
                % simIn = simIn.setVariable('Irr', 7.1464e-11); % Corrente de satiração reversa de referência (Otimização)
                % Rs_cell = Rs/n_cell;
                % simIn = simIn.setVariable('Rs_cell', Rs_cell);
                % Rp_cell = Rp*n_cell;
                % simIn = simIn.setVariable('Rp_cell', Rp_cell);
                % 
                % simIn = simIn.setVariable('Vbat', 12); % Tensão da Bateria
                % simIn = simIn.setVariable('L', 22.109e-6); % Indutância
                % simIn = simIn.setVariable('Rl', 3e-3); ; % Resistência CC Indutor
                % simIn = simIn.setVariable('Cin', 2.7e-3); % Capacitância de Entrada
                % simIn = simIn.setVariable('Rcin', 6.519e-3); %Resistência Relacionada a Capacitância de Entrada
                % simIn = simIn.setVariable('Ron', 6.5e-3); % Resistência MOSFET
                % simIn = simIn.setVariable('Vto', 1) % Tensão Direta DIODO;
       
                simIn = simIn.setVariable('kp',kp);
                simIn = simIn.setVariable('ki',ki);
                simIn = simIn.setVariable('kE',kE);
                simIn = simIn.setVariable('kdE',kdE);
                simIn = simIn.setVariable('kkp',kkp);
                simIn = simIn.setVariable('kki',kki);
                simIn = simIn.setVariable('kp_0',0.0017);
                simIn = simIn.setVariable('ki_0',1.2131);
                simIn = simIn.setVariable('n_pontos',n_pontos);                

% Executa a simulação e captura o output --------------------------------------------------------
                simOut = sim(simIn);


                try
% Acessa os dados salvos pela simulação--------------------------------------------------------

                    error = simOut.get('erro');
                    error = [error.time error.data];



                    fitness(j,1) = fitnessmetodo1(error);
                      %fitness(j,1) = fitnessmetodo2(error);
                    



                    % n11 = find(error(:,1)<0.1); n11 = n11(end);         
                    % n21 = length(error(:,1));
                    % 
                    % 
                    % erro_velho = abs(error(n11:end,2));
                    % 
                    % IAE(j,1)=trapz(error(n11:n21,1),erro_velho);
                    % 
                    % 
                    % fitness(j,1) = IAE(j,1);


                catch ME
% penaliza o erro de CALCULO--------------------------------------------------------
%                     disp(ME)
                    fitness(j,1) = 602;continue;
                end


            catch ME
% penaliza o erro de simulação--------------------------------------------------------
                disp(ME)
                fitness(j,1) = 601;continue;

            end


        catch ME
% penaliza o erro de criação do Fuzzy--------------------------------------------------------
        disp(ME)
        fitness(j,1) = 600;continue;

        end


    end

       
end

