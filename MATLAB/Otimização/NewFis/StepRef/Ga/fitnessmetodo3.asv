function fitness = fitnessmetodo3(error, kp, ki)
% Fitness baseado na IAE com punição de erro estacionário e kp e ki fora do
% do valor de ressonância em RP

% tira o transitório incial e começa a calcular a IAE a partir dos transitórios de temperatura
n11 = find(error(:,1)<0.1); n11 = n11(end);
n12 = find(error(:,1)<0.1+50e-3); n12 = n12(end);

n21 = find(error(:,1)<0.2); n21 = n21(end);
n22 = find(error(:,1)<0.2+50e-3); n22 = n22(end);

n11_ganhos = find(kp(:,1)<0.1); n11_ganhos = n11_ganhos(end);
n12_ganhos = find(kp(:,1)<0.1+50e-3); n12_ganhos = n12_ganhos(end);

n21_ganhos = find(kp(:,1)<0.2); n21_ganhos = n21_ganhos(end);
n22_ganhos = find(kp(:,1)<0.2+50e-3); n22_ganhos = n22_ganhos(end);

%Amplitudes
amp1_eest = max(abs(error(n12:n21,2)));
amp2_eest = max(abs(error(n22:end,2)));

if amp1_eest > (0.05) || amp2_eest > (0.05); amp_eest = 500; else; amp_eest = 0; end

amp1_kpest = max(abs(kp(n12_ganhos:n21_ganhos,2)));
amp2_kpest = max(abs(kp(n22_ganhos:end,2)));

if amp1_kpest > (0.0031) || amp1_kpest < (0.0031); amp_kpest = 500; else; amp_kpest = 0; end
if amp2_kpest > (0.0031) || amp2_kpest < (0.0031); amp_kpest = 500; else; amp_kpest = 0; end

amp1_kiest = max(abs(ki(n12_ganhos:n21_ganhos,2)));
amp2_kiest = max(abs(ki(n22_ganhos:end,2)));

if amp1_kiest > (3.2345) || amp1_kiest < (3.2345); amp_kiest = 500; else; amp_kiest = 0; end
if amp2_kiest > (3.2345) || amp2_kiest < (3.2345); amp_kiest = 500; else; amp_kiest = 0; end

%IAE
erro_velho = abs(error(n11:end,2));
IAE = trapz(error(n11:end,1),erro_velho);

fitness = IAE + amp_eest + amp_kiest + amp_kpest;

end